/// @file

// OPENGL:
#define INTEROP       true                                                                          // "true" = use OpenGL-OpenCL interoperability.
#define GUI_SIZE_X    800                                                                           // Window x-size [px].
#define GUI_SIZE_Y    600                                                                           // Window y-size [px].
#define GUI_NAME      "neutrino 3.0"                                                                // Window name.

#ifdef __linux__
  #define SHADER_HOME "../../shader"                                                                // Linux OpenGL shaders directory.
  #define KERNEL_HOME "../../kernel"                                                                // Linux OpenCL kernels directory.
#endif

#ifdef __APPLE__
  #define SHADER_HOME "../../shader"                                                                // Mac OpenGL shaders directory.

  #define KERNEL_HOME "../../kernel"                                                                // Mac OpenCL kernels directory.
#endif

#ifdef WIN32
  #define SHADER_HOME "..\\..\\shader"                                                              // Windows OpenGL shaders directory.
  #define KERNEL_HOME "..\\..\\kernel"                                                              // Windows OpenCL kernels directory.
#endif

#define SHADER_VERT   "voxel_vertex.vert"                                                           // OpenGL vertex shader.
#define SHADER_GEOM   "voxel_geometry.geom"                                                         // OpenGL geometry shader.
#define SHADER_FRAG   "voxel_fragment.frag"                                                         // OpenGL fragment shader.

// OPENCL:
#define QUEUE_NUM     1                                                                             // # of OpenCL queues [#].
#define KERNEL_NUM    2                                                                             // # of OpenCL kernel [#].

#define KERNEL_F1     "thekernel1.cl"                                                               // OpenCL kernel.
#define KERNEL_F2     "thekernel2.cl"                                                               // OpenCL kernel.

// INCLUDES:
#include "nu.hpp"                                                                                   // Neutrino's header file.

int main ()
{
  // DATA:
  float     x_min              = -1.0;                                                              // "x_min" spatial boundary [m].
  float     x_max              = +1.0;                                                              // "x_max" spatial boundary [m].
  float     y_min              = -1.0;                                                              // "y_min" spatial boundary [m].
  float     y_max              = +1.0;                                                              // "y_max" spatial boundary [m].
  float     z_min              = -1.0;                                                              // "z_min" spatial boundary [m].
  float     z_max              = +1.0;                                                              // "z_max" spatial boundary [m].
  float     x;
  float     y;
  float     z;
  float     r;
  size_t    nodes_x            = 25;                                                                // Number of nodes in "X" direction [].
  size_t    nodes_y            = 25;                                                                // Number of nodes in "Y" direction [].
  size_t    nodes_z            = 25;                                                                // Number of nodes in "Y" direction [].
  size_t    nodes              = nodes_x*nodes_y*nodes_z;                                           // Total # of nodes [#].
  float     dx                 = (x_max - x_min)/(nodes_x - 1);                                     // x-axis mesh spatial size [m].
  float     dy                 = (y_max - y_min)/(nodes_y - 1);                                     // y-axis mesh spatial size [m].
  float     dz                 = (z_max - z_min)/(nodes_z - 1);                                     // z-axis mesh spatial size [m].
  size_t    i;                                                                                      // "x" direction index [].
  size_t    j;                                                                                      // "y" direction index [].
  size_t    k;                                                                                      // "z" direction index [].
  size_t    gid;                                                                                    // Global index [].
  size_t    face_R             = nodes_x - 1;                                                       // Right face index [].
  size_t    face_U             = nodes_y - 1;                                                       // Up face index [].
  size_t    face_F             = nodes_z - 1;                                                       // Front face index [].
  size_t    face_L             = 0;                                                                 // Left face index [].
  size_t    face_D             = 0;                                                                 // Down face index [].
  size_t    face_B             = 0;                                                                 // Back face index [].
  size_t    neighbour_R;                                                                            // Right neighbour index [].
  size_t    neighbour_U;                                                                            // Up neighbour index [].
  size_t    neighbour_F;                                                                            // Front neighbour index [].
  size_t    neighbour_L;                                                                            // Left neighbour index [].
  size_t    neighbour_D;                                                                            // Down neighbour index [].
  size_t    neighbour_B;                                                                            // Back neighbour index [].

  // GUI PARAMETERS (orbit):
  float     orbit_x_init       = 0.0f;                                                              // x-axis orbit initial rotation.
  float     orbit_y_init       = 0.0f;                                                              // y-axis orbit initial rotation.

  // GUI PARAMETERS (pan):
  float     pan_x_init         = 0.0f;                                                              // x-axis pan initial translation.
  float     pan_y_init         = 0.0f;                                                              // y-axis pan initial translation.
  float     pan_z_init         = -2.0f;                                                             // z-axis pan initial translation.

  // GUI PARAMETERS (mouse):
  float     mouse_orbit_rate   = 1.0;                                                               // Orbit rotation rate [rev/s].
  float     mouse_pan_rate     = 5.0;                                                               // Pan translation rate [m/s].
  float     mouse_decaytime    = 1.25;                                                              // Pan LP filter decay time [s].

  // GUI PARAMETERS (gamepad):
  float     gamepad_orbit_rate = 1.0;                                                               // Orbit angular rate coefficient [rev/s].
  float     gamepad_pan_rate   = 1.0;                                                               // Pan translation rate [m/s].
  float     gamepad_decaytime  = 1.25;                                                              // Low pass filter decay time [s].
  float     gamepad_deadzone   = 0.1;                                                               // Gamepad joystick deadzone [0...1].

  // SIMULATION PARAMETERS:
  float     rho                = 1000.0;                                                            // Space mass density [kg/m^3].
  float     E                  = 100000.0;                                                          // Space Young modulus [kg/(m*s^2)].
  float     mu                 = 700.0;                                                             // Space viscosity [Pa*s].
  float     m                  = rho*dx*dy*dz;                                                      // Space mass [kg].
  float     g                  = 3*9.81;                                                            // External gravity field [m/s^2].
  float     R_0                = 3*sqrt (dx*dx + dy*dy + dz*dz);                                    // Radius of central gravity source [m].
  float     K                  = E*0.01*dy/dx;                                                      // Space elastic constant [kg/s^2].
  float     C                  = mu*dx*dy*dz;                                                       // Space damping [kg*s*m].
  float     dt_critical        = sqrt (m/K);                                                        // Critical time step [s].
  float     dt_simulation      = 0.1* dt_critical;                                                  // Simulation time step [s].

  // NEUTRINO:
  neutrino* bas                = new neutrino ();                                                   // Neutrino baseline.
  opengl*   gui                = new opengl ();                                                     // OpenGL context.
  opencl*   ctx                = new opencl ();                                                     // OpenCL context.
  shader*   S                  = new shader ();                                                     // OpenGL shader program.
  queue*    Q                  = new queue ();                                                      // OpenCL queue.
  kernel*   K1                 = new kernel ();                                                     // OpenCL kernel array.
  kernel*   K2                 = new kernel ();                                                     // OpenCL kernel array.
  size_t    kernel_sx          = nodes;                                                             // Kernel dimension "x" [#].
  size_t    kernel_sy          = 0;                                                                 // Kernel dimension "y" [#].
  size_t    kernel_sz          = 0;                                                                 // Kernel dimension "z" [#].

  // NODE KINEMATICS:
  float4G*  position           = new float4G ();                                                    // Position [m].
  float4G*  depth              = new float4G ();                                                    // Depth [m].
  float4*   velocity           = new float4 ();                                                     // Velocity [m/s].
  float4*   acceleration       = new float4 ();                                                     // Acceleration [m/s^2].

  // NODE KINEMATICS (INTERMEDIATE):
  float4*   position_int       = new float4 ();                                                     // Position (intermediate) [m].
  float4*   velocity_int       = new float4 ();                                                     // Velocity (intermediate) [m/s].
  float4*   acceleration_int   = new float4 ();                                                     // Acceleration (intermediate) [m/s^2].

  // NODE DYNAMICS:
  float4*   gravity            = new float4 ();                                                     // Gravity [m/s^2].
  float4*   stiffness          = new float4 ();                                                     // Stiffness.
  float4*   resting            = new float4 ();                                                     // Resting.
  float4*   friction           = new float4 ();                                                     // Friction.
  float4*   mass               = new float4 ();                                                     // Mass [kg].

  // MESH CONNECTIVITY:
  int1*     index_R            = new int1 ();                                                       // Right neighbour index [].
  int1*     index_U            = new int1 ();                                                       // Up neighbour index [].
  int1*     index_F            = new int1 ();                                                       // Front neighbour index [].
  int1*     index_L            = new int1 ();                                                       // Left neighbour index [].
  int1*     index_D            = new int1 ();                                                       // Down neighbour index [].
  int1*     index_B            = new int1 ();                                                       // Back neighbour index [].
  float4*   freedom            = new float4 ();                                                     // Freedom/constrain flag [].

  // SIMULATION TIME:
  float1*   dt                 = new float1 ();                                                     // Time step [s].
  float     simulation_time;                                                                        // Simulation time [s].
  int       time_step_index;                                                                        // Time step index [#].

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////// DATA INITIALIZATION //////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  position->init (nodes);                                                                           // Initializing position data...
  depth->init (nodes);                                                                              // Initializing depth data...
  velocity->init (nodes);                                                                           // Initializing velocity data...
  acceleration->init (nodes);                                                                       // Initializing acceleration data...

  position_int->init (nodes);                                                                       // Initializing intermediate position data...
  velocity_int->init (nodes);                                                                       // Initializing intermediate position data...
  acceleration_int->init (nodes);                                                                   // Initializing intermediate position data...

  gravity->init (nodes);                                                                            // Initializing gravity data...
  stiffness->init (nodes);                                                                          // Initializing stiffness data...
  resting->init (nodes);                                                                            // Initializing resiting position data...
  friction->init (nodes);                                                                           // Initializing friction data...
  mass->init (nodes);                                                                               // Initializing mass data...

  index_R->init (nodes);                                                                            // Initializing right neighbour index...
  index_U->init (nodes);                                                                            // Initializing up neighbour index...
  index_F->init (nodes);                                                                            // Initializing front neighbour index...
  index_L->init (nodes);                                                                            // Initializing left neighbour index...
  index_D->init (nodes);                                                                            // Initializing down neighbour index...
  index_B->init (nodes);                                                                            // Initializing back neighbour index...

  freedom->init (nodes);                                                                            // Initializing freedom flag data...
  dt->init (nodes);                                                                                 // Initializing time step data [s]...

  simulation_time = 0.0;                                                                            // Initializing simulation time [s]...
  time_step_index = 0;                                                                              // Initializing time step index [#]...

  std::cout << "Critical time step = " << dt_critical << "[s]" << std::endl;
  std::cout << "Simulation time step = " << dt_simulation << "[s]" << std::endl;

  for(k = 0; k < nodes_z; k++)
  {
    for(j = 0; j < nodes_y; j++)
    {
      for(i = 0; i < nodes_x; i++)
      {
        // Computing indexes:
        gid                       = (i + 0) + nodes_x*(j + 0) + nodes_x*nodes_y*(k + 0);            // Computing global index...
        neighbour_R               = (i + 1) + nodes_x*(j + 0) + nodes_x*nodes_y*(k + 0);            // Computing right neighbour index...
        neighbour_U               = (i + 0) + nodes_x*(j + 1) + nodes_x*nodes_y*(k + 0);            // Computing up neighbour index...
        neighbour_F               = (i + 0) + nodes_x*(j + 0) + nodes_x*nodes_y*(k + 1);            // Computing front neighbour index...
        neighbour_L               = (i - 1) + nodes_x*(j + 0) + nodes_x*nodes_y*(k + 0);            // Computing left neighbour index...
        neighbour_D               = (i + 0) + nodes_x*(j - 1) + nodes_x*nodes_y*(k + 0);            // Computing down neighbour index...
        neighbour_B               = (i + 0) + nodes_x*(j + 0) + nodes_x*nodes_y*(k - 1);            // Computing front neighbour index...

        // Setting "x" initial position...
        position->data[gid].x     = x_min + i*dx;                                                   // Setting "x" position...
        position->data[gid].y     = y_min + j*dy;                                                   // Setting "y" position...
        position->data[gid].z     = z_min + k*dz;                                                   // Setting "z" position...
        position->data[gid].w     = 1.0;                                                            // Setting "w" position...

        velocity->data[gid].x     = 0.0;                                                            // Setting "x" velocity...
        velocity->data[gid].y     = 0.0;                                                            // Setting "y" velocity...
        velocity->data[gid].z     = 0.0;                                                            // Setting "z" velocity...
        velocity->data[gid].w     = 1.0;                                                            // Setting "w" velocity...

        acceleration->data[gid].x = 0.0;                                                            // Setting "x" acceleration...
        acceleration->data[gid].y = 0.0;                                                            // Setting "y" acceleration...
        acceleration->data[gid].z = 0.0;                                                            // Setting "z" acceleration...
        acceleration->data[gid].w = 1.0;                                                            // Setting "w" acceleration...

        depth->data[gid].x        = 1.0;                                                            // Setting "x" initial color...
        depth->data[gid].y        = 0.0;                                                            // Setting "y" initial color...
        depth->data[gid].z        = 0.0;                                                            // Setting "z" initial color...
        depth->data[gid].w        = 1.0;                                                            // Setting "w" initial color...

        x                         = x_min + i*dx;
        y                         = y_min + j*dy;
        z                         = z_min + k*dz;
        r                         = sqrt (x*x + y*y + z*z);

        if(r > R_0)
        {
          gravity->data[gid].x = -g*x/(r*r*r);                                                      // Setting "x" gravity...

          gravity->data[gid].y = -g*y/(r*r*r);                                                      // Setting "y" gravity...

          gravity->data[gid].z = -g*z/(r*r*r);                                                      // Setting "z" gravity...
        }

        else
        {
          gravity->data[gid].x = -g*x*r;
          gravity->data[gid].y = -g*y*r;
          gravity->data[gid].z = -g*z*r;
        }

        gravity->data[gid].w   = 1.0;                                                               // Setting "w" gravity...

        stiffness->data[gid].x = K;                                                                 // Setting "x" stiffness...
        stiffness->data[gid].y = K;                                                                 // Setting "y" stiffness...
        stiffness->data[gid].z = K;                                                                 // Setting "z" stiffness...
        stiffness->data[gid].w = 1.0;                                                               // Setting "w" stiffness...

        resting->data[gid].x   = dx;                                                                // Setting "x" resting position...
        resting->data[gid].y   = dy;                                                                // Setting "y" resting position...
        resting->data[gid].z   = dz;                                                                // Setting "z" resting position...
        resting->data[gid].w   = 1.0;                                                               // Setting "w" resting position...

        friction->data[gid].x  = C;                                                                 // Setting "x" friction...
        friction->data[gid].y  = C;                                                                 // Setting "y" friction...
        friction->data[gid].z  = C;                                                                 // Setting "z" friction...
        friction->data[gid].w  = 1.0;                                                               // Setting "w" friction...

        mass->data[gid].x      = m;                                                                 // Setting "x" mass...
        mass->data[gid].y      = m;                                                                 // Setting "y" mass...
        mass->data[gid].z      = m;                                                                 // Setting "z" mass...
        mass->data[gid].w      = 1.0;                                                               // Setting "w" mass...

        freedom->data[gid].x   = 1.0;                                                               // Setting "x" freedom...
        freedom->data[gid].y   = 1.0;                                                               // Setting "y" freedom...
        freedom->data[gid].z   = 1.0;                                                               // Setting "z" freedom...
        freedom->data[gid].w   = 1.0;                                                               // Setting "w" freedom...

        dt->data[gid]          = dt_simulation;                                                     // Setting time step...

        // When on bulk:
        if(
           (i != face_L) &&                                                                         // Not on left face.
           (i != face_R) &&                                                                         // Not on right face.
           (j != face_D) &&                                                                         // Not on down face.
           (j != face_U) &&                                                                         // Not on up face.
           (k != face_B) &&                                                                         // Not on back face.
           (k != face_F)                                                                            // Not on front face.
          )
        {
          index_R->data[gid] = neighbour_R;                                                         // Setting index to right neighbour...
          index_U->data[gid] = neighbour_U;                                                         // Setting index to up neighbour...
          index_F->data[gid] = neighbour_F;                                                         // Setting index to front neighbour...
          index_L->data[gid] = neighbour_L;                                                         // Setting index to left neighbour...
          index_D->data[gid] = neighbour_D;                                                         // Setting index to down neighbour...
          index_B->data[gid] = neighbour_B;                                                         // Setting index to back neighbour...
        }

        else                                                                                        // When on all faces:
        {
          gravity->data[gid].x = 0.0;                                                               // Setting "x" gravity...
          gravity->data[gid].y = 0.0;                                                               // Setting "y" gravity...
          gravity->data[gid].z = 0.0;                                                               // Setting "z" gravity...
          gravity->data[gid].w = 1.0;                                                               // Setting "w" gravity...

          freedom->data[gid].x = 0.0;                                                               // Setting "x" freedom...
          freedom->data[gid].y = 0.0;                                                               // Setting "y" freedom...
          freedom->data[gid].z = 0.0;                                                               // Setting "z" freedom...
          freedom->data[gid].w = 0.0;                                                               // Setting "w" freedom...
        }

        // When on left face (excluding borders and corners):
        if(
           (i == face_L) &&                                                                         // On left face.
           (j != face_D) &&                                                                         // Not on down face.
           (j != face_U) &&                                                                         // Not on up face.
           (k != face_B) &&                                                                         // Not on back face.
           (k != face_F)                                                                            // Not on front border.
          )
        {
          index_R->data[gid] = neighbour_R;                                                         // Setting index to right neighbour...
          index_U->data[gid] = neighbour_U;                                                         // Setting index to up neighbour...
          index_F->data[gid] = neighbour_F;                                                         // Setting index to front neighbour...
          index_L->data[gid] = gid;                                                                 // Setting index to central node...
          index_D->data[gid] = neighbour_D;                                                         // Setting index to down neighbour...
          index_B->data[gid] = neighbour_B;                                                         // Setting index to back neighbour...
        }

        // When on right face (excluding borders and corners):
        if(
           (i == face_R) &&                                                                         // On right face.
           (j != face_D) &&                                                                         // Not on down face.
           (j != face_U) &&                                                                         // Not on up face.
           (k != face_B) &&                                                                         // Not on back face.
           (k != face_F)                                                                            // Not on front face.
          )
        {
          index_R->data[gid] = gid;                                                                 // Setting index to central node...
          index_U->data[gid] = neighbour_U;                                                         // Setting index to up neighbour...
          index_F->data[gid] = neighbour_F;                                                         // Setting index to front neighbour...
          index_L->data[gid] = neighbour_L;                                                         // Setting index to left neighbour...
          index_D->data[gid] = neighbour_D;                                                         // Setting index to down neighbour...
          index_B->data[gid] = neighbour_B;                                                         // Setting index to back neighbour...
        }

        // When on down face (excluding borders and corners):
        if(
           (i != face_L) &&                                                                         // Not on left face.
           (i != face_R) &&                                                                         // Not on right face.
           (j == face_D) &&                                                                         // On down face.
           (k != face_B) &&                                                                         // Not on back face.
           (k != face_F)                                                                            // Not on front face.
          )
        {
          index_R->data[gid] = neighbour_R;                                                         // Setting index to right neighbour...
          index_U->data[gid] = neighbour_U;                                                         // Setting index to up neighbour...
          index_F->data[gid] = neighbour_F;                                                         // Setting index to front neighbour...
          index_L->data[gid] = neighbour_L;                                                         // Setting index to left neighbour...
          index_D->data[gid] = gid;                                                                 // Setting index to central node...
          index_B->data[gid] = neighbour_B;                                                         // Setting index to back neighbour...
        }

        // When on up face (excluding borders and corners):
        if(
           (i != face_L) &&                                                                         // Not on left face.
           (i != face_R) &&                                                                         // Not on right face.
           (j == face_U) &&                                                                         // On up face.
           (k != face_B) &&                                                                         // Not on back face.
           (k != face_F)                                                                            // Not on front face.
          )
        {
          index_R->data[gid] = neighbour_R;                                                         // Setting index to right neighbour...
          index_U->data[gid] = gid;                                                                 // Setting index to central node...
          index_F->data[gid] = neighbour_F;                                                         // Setting index to front neighbour...
          index_L->data[gid] = neighbour_L;                                                         // Setting index to left neighbour...
          index_D->data[gid] = neighbour_D;                                                         // Setting index to down neighbour...
          index_B->data[gid] = neighbour_B;                                                         // Setting index to back neighbour...
        }

        // When on back face (excluding borders and corners):
        if(
           (i != face_L) &&                                                                         // Not on left face.
           (i != face_R) &&                                                                         // Not on right face.
           (j != face_D) &&                                                                         // Not on front face.
           (j != face_U) &&                                                                         // Not on up face.
           (k == face_B)                                                                            // On back face.
          )
        {
          index_R->data[gid] = neighbour_R;                                                         // Setting index to right neighbour...
          index_U->data[gid] = neighbour_U;                                                         // Setting index to up neighbour...
          index_F->data[gid] = neighbour_F;                                                         // Setting index to front neighbour...
          index_L->data[gid] = neighbour_L;                                                         // Setting index to left neighbour...
          index_D->data[gid] = neighbour_D;                                                         // Setting index to down neighbour...
          index_B->data[gid] = gid;                                                                 // Setting index to central node...
        }

        // When on front face (excluding borders and corners):
        if(
           (i != face_L) &&                                                                         // Not on left face.
           (i != face_R) &&                                                                         // Not on right face.
           (j != face_D) &&                                                                         // Not on front face.
           (j != face_U) &&                                                                         // Not on up face.
           (k == face_F)                                                                            // On front face.
          )
        {
          index_R->data[gid] = neighbour_R;                                                         // Setting index to right neighbour...
          index_U->data[gid] = neighbour_U;                                                         // Setting index to up neighbour...
          index_F->data[gid] = gid;                                                                 // Setting index to central node...
          index_L->data[gid] = neighbour_L;                                                         // Setting index to left neighbour...
          index_D->data[gid] = neighbour_D;                                                         // Setting index to down neighbour...
          index_B->data[gid] = neighbour_B;                                                         // Setting index to back neighbour...
        }

        // When on left-down edge (excluding corners):
        if(
           (i == face_L) &&                                                                         // On left face.
           (j == face_D) &&                                                                         // On down face.
           (k != face_B) &&                                                                         // Not on back face.
           (k != face_F)                                                                            // Not on front face.
          )
        {
          index_R->data[gid] = neighbour_R;                                                         // Setting index to right neighbour...
          index_U->data[gid] = neighbour_U;                                                         // Setting index to up neighbour...
          index_F->data[gid] = neighbour_F;                                                         // Setting index to front neighbour...
          index_L->data[gid] = gid;                                                                 // Setting index to central node...
          index_D->data[gid] = gid;                                                                 // Setting index to central node...
          index_B->data[gid] = neighbour_B;                                                         // Setting index to back neighbour...
        }

        // When on left-up edge (excluding corners):
        if(
           (i == face_L) &&                                                                         // On left face.
           (j == face_U) &&                                                                         // On up face.
           (k != face_B) &&                                                                         // Not on back face.
           (k != face_F)                                                                            // Not on front face.
          )
        {
          index_R->data[gid] = neighbour_R;                                                         // Setting index to right neighbour...
          index_U->data[gid] = gid;                                                                 // Setting index to central node...
          index_F->data[gid] = neighbour_F;                                                         // Setting index to front neighbour...
          index_L->data[gid] = gid;                                                                 // Setting index to central node...
          index_D->data[gid] = neighbour_D;                                                         // Setting index to down neighbour...
          index_B->data[gid] = neighbour_B;                                                         // Setting index to back neighbour...
        }

        // When on right-down edge (excluding corners):
        if(
           (i == face_R) &&                                                                         // On right face.
           (j == face_D) &&                                                                         // On down face.
           (k != face_B) &&                                                                         // Not on back face.
           (k != face_F)                                                                            // Not on front face.
          )
        {
          index_R->data[gid] = gid;                                                                 // Setting index to central node...
          index_U->data[gid] = neighbour_U;                                                         // Setting index to up neighbour...
          index_F->data[gid] = neighbour_F;                                                         // Setting index to front neighbour...
          index_L->data[gid] = neighbour_L;                                                         // Setting index to left neighbour...
          index_D->data[gid] = gid;                                                                 // Setting index to central node...
          index_B->data[gid] = neighbour_B;                                                         // Setting index to back neighbour...
        }

        // When on right-up edge (excluding corners):
        if(
           (i == face_R) &&                                                                         // On right face.
           (j == face_U) &&                                                                         // On up face.
           (k != face_B) &&                                                                         // Not on back face.
           (k != face_F)                                                                            // Not on front face.
          )
        {
          index_R->data[gid] = gid;                                                                 // Setting index to central node...
          index_U->data[gid] = gid;                                                                 // Setting index to central node...
          index_F->data[gid] = neighbour_F;                                                         // Setting index to front neighbour...
          index_L->data[gid] = neighbour_L;                                                         // Setting index to left neighbour...
          index_D->data[gid] = neighbour_D;                                                         // Setting index to down neighbour...
          index_B->data[gid] = neighbour_B;                                                         // Setting index to back neighbour...
        }

        // When on back-down edge (excluding corners):
        if(
           (i != face_L) &&                                                                         // Not on left face.
           (i != face_R) &&                                                                         // Not on right face.
           (j == face_D) &&                                                                         // On down face.
           (k == face_B)                                                                            // On back face.
          )
        {
          index_R->data[gid] = neighbour_R;                                                         // Setting index to right neighbour...
          index_U->data[gid] = neighbour_U;                                                         // Setting index to up neighbour...
          index_F->data[gid] = neighbour_F;                                                         // Setting index to front neighbour...
          index_L->data[gid] = neighbour_L;                                                         // Setting index to left neighbour...
          index_D->data[gid] = gid;                                                                 // Setting index to central node...
          index_B->data[gid] = gid;                                                                 // Setting index to central node...
        }

        // When on back-up edge (excluding corners):
        if(
           (i != face_L) &&                                                                         // Not on left face.
           (i != face_R) &&                                                                         // Not on right face.
           (j == face_U) &&                                                                         // On up face.
           (k == face_B)                                                                            // On back face.
          )
        {
          index_R->data[gid] = neighbour_R;                                                         // Setting index to right neighbour...
          index_U->data[gid] = gid;                                                                 // Setting index to central node...
          index_F->data[gid] = neighbour_F;                                                         // Setting index to front neighbour...
          index_L->data[gid] = neighbour_L;                                                         // Setting index to left neighbour...
          index_D->data[gid] = neighbour_D;                                                         // Setting index to down neighbour...
          index_B->data[gid] = gid;                                                                 // Setting index to central node...
        }

        // When on front-down edge (excluding corners):
        if(
           (i != face_L) &&                                                                         // Not on left face.
           (i != face_R) &&                                                                         // Not on right face.
           (j == face_D) &&                                                                         // On down face.
           (k == face_F)                                                                            // On front face.
          )
        {
          index_R->data[gid] = neighbour_R;                                                         // Setting index to right neighbour...
          index_U->data[gid] = neighbour_U;                                                         // Setting index to up neighbour...
          index_F->data[gid] = gid;                                                                 // Setting index to central node...
          index_L->data[gid] = neighbour_L;                                                         // Setting index to left neighbour...
          index_D->data[gid] = gid;                                                                 // Setting index to central node...
          index_B->data[gid] = neighbour_B;                                                         // Setting index to back neighbour...
        }

        // When on front-up edge (excluding corners):
        if(
           (i != face_L) &&                                                                         // Not on left face.
           (i != face_R) &&                                                                         // Not on right face.
           (j == face_U) &&                                                                         // On up face.
           (k == face_F)                                                                            // On front face.
          )
        {
          index_R->data[gid] = neighbour_R;                                                         // Setting index to right neighbour...
          index_U->data[gid] = gid;                                                                 // Setting index to central node...
          index_F->data[gid] = gid;                                                                 // Setting index to central node...
          index_L->data[gid] = neighbour_L;                                                         // Setting index to left neighbour...
          index_D->data[gid] = neighbour_D;                                                         // Setting index to down neighbour...
          index_B->data[gid] = neighbour_B;                                                         // Setting index to back neighbour...
        }

        // When on left-down-back corner:
        if(
           (i == face_L) &&                                                                         // On left face.
           (j == face_D) &&                                                                         // On down face.
           (k == face_B)                                                                            // On back face.
          )
        {
          index_R->data[gid] = neighbour_R;                                                         // Setting index to right neighbour...
          index_U->data[gid] = neighbour_U;                                                         // Setting index to up neighbour...
          index_F->data[gid] = neighbour_F;                                                         // Setting index to front neighbour...
          index_L->data[gid] = gid;                                                                 // Setting index to central node...
          index_D->data[gid] = gid;                                                                 // Setting index to central node...
          index_B->data[gid] = gid;                                                                 // Setting index to central node...
        }

        // When on right-down-back corner:
        if(
           (i == face_R) &&                                                                         // On right face.
           (j == face_D) &&                                                                         // On down face.
           (k == face_B)                                                                            // On back face.
          )
        {
          index_R->data[gid] = gid;                                                                 // Setting index to central node...
          index_U->data[gid] = neighbour_U;                                                         // Setting index to up neighbour...
          index_F->data[gid] = neighbour_F;                                                         // Setting index to front neighbour...
          index_L->data[gid] = neighbour_L;                                                         // Setting index to left neighbour...
          index_D->data[gid] = gid;                                                                 // Setting index to central node...
          index_B->data[gid] = gid;                                                                 // Setting index to central node...
        }

        // When on left-up-back corner:
        if(
           (i == face_L) &&                                                                         // On left face.
           (j == face_U) &&                                                                         // On up face.
           (k == face_B)                                                                            // On back face.
          )
        {
          index_R->data[gid] = neighbour_R;                                                         // Setting index to right neighbour...
          index_U->data[gid] = gid;                                                                 // Setting index to central node...
          index_F->data[gid] = neighbour_F;                                                         // Setting index to front neighbour...
          index_L->data[gid] = gid;                                                                 // Setting index to central node...
          index_D->data[gid] = neighbour_D;                                                         // Setting index to down neighbour...
          index_B->data[gid] = gid;                                                                 // Setting index to central node...
        }

        // When on right-up-back corner:
        if(
           (i == face_R) &&                                                                         // On right face.
           (j == face_U) &&                                                                         // On up face.
           (k == face_B)                                                                            // On back face.
          )
        {
          index_R->data[gid] = gid;                                                                 // Setting index to central node...
          index_U->data[gid] = gid;                                                                 // Setting index to central node...
          index_F->data[gid] = neighbour_F;                                                         // Setting index to front neighbour...
          index_L->data[gid] = neighbour_L;                                                         // Setting index to left neighbour...
          index_D->data[gid] = neighbour_D;                                                         // Setting index to down neighbour...
          index_B->data[gid] = gid;                                                                 // Setting index to central node...
        }

        // When on left-down-front corner:
        if(
           (i == face_L) &&                                                                         // On left face.
           (j == face_D) &&                                                                         // On down face.
           (k == face_F)                                                                            // On front face.
          )
        {
          index_R->data[gid] = neighbour_R;                                                         // Setting index to right neighbour...
          index_U->data[gid] = neighbour_U;                                                         // Setting index to up neighbour...
          index_F->data[gid] = gid;                                                                 // Setting index to central node...
          index_L->data[gid] = gid;                                                                 // Setting index to central node...
          index_D->data[gid] = gid;                                                                 // Setting index to central node...
          index_B->data[gid] = neighbour_B;                                                         // Setting index to back neighbour...
        }

        // When on right-down-front corner:
        if(
           (i == face_R) &&                                                                         // On right face.
           (j == face_D) &&                                                                         // On down face.
           (k == face_F)                                                                            // On front face.
          )
        {
          index_R->data[gid] = gid;                                                                 // Setting index to central node...
          index_U->data[gid] = neighbour_U;                                                         // Setting index to up neighbour...
          index_F->data[gid] = gid;                                                                 // Setting index to central node...
          index_L->data[gid] = neighbour_L;                                                         // Setting index to left neighbour...
          index_D->data[gid] = gid;                                                                 // Setting index to central node...
          index_B->data[gid] = neighbour_B;                                                         // Setting index to back neighbour...
        }

        // When on left-up-front corner:
        if(
           (i == face_L) &&                                                                         // On left face.
           (j == face_U) &&                                                                         // On up face.
           (k == face_F)                                                                            // On front face.
          )
        {
          index_R->data[gid] = neighbour_R;                                                         // Setting index to right neighbour...
          index_U->data[gid] = gid;                                                                 // Setting index to central node...
          index_F->data[gid] = gid;                                                                 // Setting index to central node...
          index_L->data[gid] = gid;                                                                 // Setting index to central node...
          index_D->data[gid] = neighbour_D;                                                         // Setting index to down neighbour...
          index_B->data[gid] = neighbour_B;                                                         // Setting index to back neighbour...
        }

        // When on right-up-front corner:
        if(
           (i == face_R) &&                                                                         // On right face.
           (j == face_U) &&                                                                         // On up face.
           (k == face_F)                                                                            // On front face.
          )
        {
          index_R->data[gid] = gid;                                                                 // Setting index to central node...
          index_U->data[gid] = gid;                                                                 // Setting index to central node...
          index_F->data[gid] = gid;                                                                 // Setting index to central node...
          index_L->data[gid] = neighbour_L;                                                         // Setting index to left neighbour...
          index_D->data[gid] = neighbour_D;                                                         // Setting index to down neighbour...
          index_B->data[gid] = neighbour_B;                                                         // Setting index to back neighbour...
        }

      }
    }
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////// NEUTRINO INITIALIZATION /////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  bas->init (QUEUE_NUM, KERNEL_NUM);                                                                // Initializing Neutrino baseline...
  gui->init
  (
   bas,                                                                                             // Neutrino baseline.
   GUI_SIZE_X,                                                                                      // GUI x-size [px].
   GUI_SIZE_Y,                                                                                      // GUI y-size [px.]
   GUI_NAME,                                                                                        // GUI name.
   orbit_x_init,                                                                                    // Initial x-orbit.
   orbit_y_init,                                                                                    // Initial y-orbit.
   pan_x_init,                                                                                      // Initial x-pan.
   pan_y_init,                                                                                      // Initial y-pan.
   pan_z_init                                                                                       // Initial z-pan.
  );
  ctx->init (bas, gui, NU_GPU);                                                                     // Initializing OpenCL context...
  S->init (bas, SHADER_HOME, SHADER_VERT, SHADER_GEOM, SHADER_FRAG);                                // Initializing OpenGL shader...
  Q->init (bas);                                                                                    // Initializing OpenCL queue...
  K1->init (bas, KERNEL_HOME, KERNEL_F1, kernel_sx, kernel_sy, kernel_sz);                          // Initializing OpenCL kernel K1...
  K2->init (bas, KERNEL_HOME, KERNEL_F2, kernel_sx, kernel_sy, kernel_sz);                          // Initializing OpenCL kernel K2...

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////// SETTING OPENCL KERNEL ARGUMENTS /////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  K1->setarg (position, 0);                                                                         // Setting position kernel argument...
  K1->setarg (depth, 1);                                                                            // Setting depth kernel argument...
  K1->setarg (position_int, 2);                                                                     // Setting intermediate position kernel argument...
  K1->setarg (velocity, 3);                                                                         // Setting velocity kernel argument...
  K1->setarg (velocity_int, 4);                                                                     // Setting intermediate velocity kernel argument...
  K1->setarg (acceleration, 5);                                                                     // Setting acceleration kernel argument...
  K1->setarg (acceleration_int, 6);                                                                 // Setting intermediate acceleration kernel argument...
  K1->setarg (gravity, 7);                                                                          // Setting gravity kernel argument...
  K1->setarg (stiffness, 8);                                                                        // Setting stiffness kernel argument...
  K1->setarg (resting, 9);                                                                          // Setting resting position kernel argument...
  K1->setarg (friction, 10);                                                                        // Setting friction kernel argument...
  K1->setarg (mass, 11);                                                                            // Setting mass kernel argument...
  K1->setarg (index_R, 12);                                                                         // Setting right neighbour index kernel argument...
  K1->setarg (index_U, 13);                                                                         // Setting up neighbour index kernel argument...
  K1->setarg (index_F, 14);                                                                         // Setting front neighbour index kernel argument...
  K1->setarg (index_L, 15);                                                                         // Setting left neighbour index kernel argument...
  K1->setarg (index_D, 16);                                                                         // Setting down neighbour index kernel argument...
  K1->setarg (index_B, 17);                                                                         // Setting back neighbour index kernel argument...
  K1->setarg (freedom, 18);                                                                         // Setting freedom flag kernel argument...
  K1->setarg (dt, 19);                                                                              // Setting time step kernel argument...

  K2->setarg (position, 0);                                                                         // Setting position kernel argument...
  K2->setarg (depth, 1);                                                                            // Setting depth kernel argument...
  K2->setarg (position_int, 2);                                                                     // Setting intermediate position kernel argument...
  K2->setarg (velocity, 3);                                                                         // Setting velocity kernel argument...
  K2->setarg (velocity_int, 4);                                                                     // Setting intermediate velocity kernel argument...
  K2->setarg (acceleration, 5);                                                                     // Setting acceleration kernel argument...
  K2->setarg (acceleration_int, 6);                                                                 // Setting intermediate acceleration kernel argument...
  K2->setarg (gravity, 7);                                                                          // Setting gravity kernel argument...
  K2->setarg (stiffness, 8);                                                                        // Setting stiffness kernel argument...
  K2->setarg (resting, 9);                                                                          // Setting resting position kernel argument...
  K2->setarg (friction, 10);                                                                        // Setting friction kernel argument...
  K2->setarg (mass, 11);                                                                            // Setting mass kernel argument...
  K2->setarg (index_R, 12);                                                                         // Setting right neighbour index kernel argument...
  K2->setarg (index_U, 13);                                                                         // Setting up neighbour index kernel argument...
  K2->setarg (index_F, 14);                                                                         // Setting front neighbour index kernel argument...
  K2->setarg (index_L, 15);                                                                         // Setting left neighbour index kernel argument...
  K2->setarg (index_D, 16);                                                                         // Setting down neighbour index kernel argument...
  K2->setarg (index_B, 17);                                                                         // Setting back neighbour index kernel argument...

  K2->setarg (freedom, 18);                                                                         // Setting freedom flag kernel argument...
  K2->setarg (dt, 19);                                                                              // Setting time step kernel argument...

  position->name = "voxel_center";                                                                  // Setting variable name for OpenGL shader...
  depth->name    = "voxel_color";                                                                   // Setting variable name for OpenGL shader...

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////// WRITING DATA ON OPENCL QUEUE //////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  Q->write (position, 0);                                                                           // Writing position data on queue...
  Q->write (depth, 1);                                                                              // Writing depth data on queue...
  Q->write (position_int, 2);                                                                       // Writing intermediate position data on queue...
  Q->write (velocity, 3);                                                                           // Writing velocity data on queue...
  Q->write (velocity_int, 4);                                                                       // Writing intermediate velocity data on queue...
  Q->write (acceleration, 5);                                                                       // Writing acceleration data on queue...
  Q->write (acceleration_int, 6);                                                                   // Writing intermediate acceleration data on queue...
  Q->write (gravity, 7);                                                                            // Writing gravity data on queue...
  Q->write (stiffness, 8);                                                                          // Writing stiffness data on queue...
  Q->write (resting, 9);                                                                            // Writing resting position data on queue...
  Q->write (friction, 10);                                                                          // Writing friction data on queue...
  Q->write (mass, 11);                                                                              // Writing mass data on queue...
  Q->write (index_R, 12);                                                                           // Writing right neighbour index on queue...
  Q->write (index_U, 13);                                                                           // Writing up neighbour index on queue...
  Q->write (index_F, 14);                                                                           // Writing front neighbour index on queue...
  Q->write (index_L, 15);                                                                           // Writing left neighbour index on queue...
  Q->write (index_D, 16);                                                                           // Writing down neighbour index on queue...
  Q->write (index_B, 17);                                                                           // Writing back neighbour index on queue...
  Q->write (freedom, 18);                                                                           // Writing freedom flag data on queue...
  Q->write (dt, 19);                                                                                // Writing time step data on queue...

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////// SETTING OPENGL SHADER ARGUMENTS ////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  S->setarg (position, 0);                                                                          // Setting shader argument "0"...
  S->setarg (depth, 1);                                                                             // Setting shader argument "1"...
  S->build ();                                                                                      // Building shader program...

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////// APPLICATION LOOP ////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  while(!gui->closed ())                                                                            // Opening window...
  {
    bas->get_tic ();                                                                                // Getting "tic" [us]...

    gui->clear ();                                                                                  // Clearing gui...
    gui->poll_events ();                                                                            // Polling gui events...

    Q->acquire (position, 0);                                                                       // Acquiring OpenGL/CL shared argument...
    Q->acquire (depth, 1);                                                                          // Acquiring OpenGL/CL shared argument...
    ctx->execute (K1, Q, NU_WAIT);                                                                  // Executing OpenCL kernel...
    ctx->execute (K2, Q, NU_WAIT);                                                                  // Executing OpenCL kernel...
    Q->release (position, 0);                                                                       // Releasing OpenGL/CL shared argument...
    Q->release (depth, 1);                                                                          // Releasing OpenGL/CL shared argument...

    gui->mouse_navigation (
                           mouse_orbit_rate,                                                        // Orbit angular rate coefficient [rev/s].
                           mouse_pan_rate,                                                          // Pan translation rate [m/s].
                           mouse_decaytime                                                          // Orbit low pass decay time [s].
                          );

    gui->gamepad_navigation (
                             gamepad_orbit_rate,                                                    // Orbit angular rate coefficient [rev/s].
                             gamepad_pan_rate,                                                      // Pan translation rate [m/s].
                             gamepad_decaytime,                                                     // Low pass filter decay time [s].
                             gamepad_deadzone                                                       // Gamepad joystick deadzone [0...1].
                            );

    if(gui->button_CROSS)
    {
      gui->close ();                                                                                // Closing gui...
    }

    gui->plot (S);                                                                                  // Plotting shared arguments...

    gui->refresh ();                                                                                // Refreshing gui...

    simulation_time += dt_simulation;                                                               // Updating simulation time [s]...
    time_step_index++;                                                                              // Updating time step index [#]...

    bas->get_toc ();                                                                                // Getting "toc" [us]...
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////// CLEANUP ////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  delete bas;                                                                                       // Deleting Neutrino baseline...
  delete gui;                                                                                       // Deleting OpenGL gui...
  delete ctx;                                                                                       // Deleting OpenCL context...

  delete position;                                                                                  // Deleting position data...
  delete depth;                                                                                     // Deleting depth data...
  delete velocity;                                                                                  // Deleting velocity data...
  delete acceleration;                                                                              // Deleting acceleration data...

  delete position_int;                                                                              // Deleting intermediate position data...
  delete velocity_int;                                                                              // Deleting intermediate velocity data...
  delete acceleration_int;                                                                          // Deleting intermediate acceleration data...

  delete gravity;                                                                                   // Deleting gravity data...
  delete stiffness;                                                                                 // Deleting stiffness data...
  delete resting;                                                                                   // Deleting resting data...
  delete friction;                                                                                  // Deleting friction data...
  delete mass;                                                                                      // Deleting mass data...

  delete index_R;                                                                                   // Deleting right neighbour index...
  delete index_U;                                                                                   // Deleting up neighbour index...
  delete index_F;                                                                                   // Deleting front neighbour index...
  delete index_L;                                                                                   // Deleting left neighbour index...
  delete index_D;                                                                                   // Deleting down neighbour index...
  delete index_B;                                                                                   // Deleting back neighbour index...

  delete freedom;                                                                                   // Deleting freedom flag data...
  delete dt;                                                                                        // Deleting time step data...

  delete Q;                                                                                         // Deleting OpenCL queue...
  delete K1;                                                                                        // Deleting OpenCL kernel...
  delete K2;                                                                                        // Deleting OpenCL kernel...

  return 0;
}
