message("Checking cmake version...")                                                                # Printing message...
cmake_minimum_required(VERSION 3.0)                                                                 # Requiring cmake 3.0...

message("")                                                                                         # Printing message...
message("################################################################################")         # Printing message...
message("################################ C/C++ COMPILER ################################")         # Printing message...
message("################################################################################")         # Printing message...

message("Setting project name...")                                                                  # Printing message...
project (cloth)                                                                                     # Setting project name...
message("Project name = ${PROJECT_NAME}")                                                           # Printing message...

message("Setting build type...")                                                                    # Printing message...
set(CMAKE_BUILD_TYPE Release)                                                                       # Setting build type...
message("Build type = ${CMAKE_BUILD_TYPE}")                                                         # Printing message...

message("Adding source files...")                                                                   # Printing message...
aux_source_directory(${CMAKE_HOME_DIRECTORY}/src SRC_FILES)                                         # Getting all Neutrino source files...
set(SOURCES                                                                                         # Setting "SOURCES" variable...
  ${SRC_FILES})                                                                                     # All project source files.

message("Adding build target as executable...")                                                     # Printing message...
add_executable(${PROJECT_NAME} ${SOURCES})                                                          # Adding executable...

if(APPLE)                                                                                           # Detecting APPLE...
  message("Adding include files...")                                                                # Printing message...
  set(INCLUDES                                                                                      # Setting "INCLUDES" variable...
    ${CMAKE_HOME_DIRECTORY}/include                                                                 # Neutrino include directory.
    ${NEUTRINO_PATH}/include)
  target_include_directories(                                                                       # Setting include directories...
    ${PROJECT_NAME} PRIVATE                                                                         # Project name.
    ${INCLUDES})                                                                                    # All include directories.

  message("Adding linked libraries...")                                                             # Printing message...
  target_link_libraries(                                                                            # Setting other linked libraries...
    ${PROJECT_NAME}                                                                                 # Project name.
    "-framework OpenGL"                                                                             # OpenGL library.
    "-framework OpenCL"                                                                             # OpenCL library.
    "/Library/GLFW/lib-macos/libglfw.3.dylib"                                                       # GLFW library.
    "-lm"
    "-lneutrino")

  message("Setting APPLE build directory...")                                                       # Printing message...
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_HOME_DIRECTORY}/build/mac)                             # Setting build directory...
endif(APPLE)

if(UNIX AND NOT APPLE)                                                                              # Detecting LINUX...
  message("Adding include files...")                                                                # Printing message...
  set(INCLUDES                                                                                      # Setting "INCLUDES" variable...
    ${CMAKE_HOME_DIRECTORY}/include                                                                 # Neutrino include directory.
    ${NEUTRINO_PATH}/include)
  target_include_directories(                                                                       # Setting include directories...
    ${PROJECT_NAME} PRIVATE                                                                         # Project name.
    ${INCLUDES})                                                                                    # All include directories.

  message("Adding linked libraries...")                                                             # Printing message...
  target_link_libraries(                                                                            # Setting other linked libraries...
    ${PROJECT_NAME}                                                                                 # Project name.
    "-lOpenGL"                                                                                      # OpenGL library.
    "-lOpenCL"                                                                                      # OpenCL library.
    "-ldl"                                                                                          # "libdl" library.
    "-lglfw"                                                                                        # GLFW library.
    "-lm"                                                                                           # "math" library.
    "/run/media/ezor/LINUX/BookhouseBoys/ezor/libneutrino/lib/libneutrino.a")                                                                                   # "neutrino" library.

  message("Setting LINUX build directory...")                                                       # Printing message...
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_HOME_DIRECTORY}/build/linux)                           # Setting build directory...
endif(UNIX AND NOT APPLE)

add_custom_target(run                                                                               # Adding "make run" command...
  WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}                                               # Working directory.
  COMMAND ${PROJECT_NAME}                                                                           # Project name.
  VERBATIM)                                                                                         # Escaping all commands properly for the build tool...

if(UNIX AND NOT APPLE)                                                                              # Detecting non APPLE LINUX...
  message("Setting LINUX variable, according to an existing LINUX (but not APPLE) OS...")           # Printing message...
  set(LINUX TRUE)                                                                                   # Setting LINUX flag...
endif()

if(WIN32)                                                                                           # Detecting WINDOWS...
  # EZOR: 03NOV2019 these 4 lines have to be tested.
  message("Setting WINDOWS build directory...")                                                     # Printing message...
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_HOME_DIRECTORY}/build/windows)                         # Setting build directory...
  message("Adding an executable...")                                                                # Printing message...
  add_executable(${PROJECT_NAME} ${SOURCES})                                                        # Adding executable...

  message("Setting Windows include directories...")                                                 # Printing message...
  target_include_directories(                                                                       # Setting include directories...
    ${PROJECT_NAME}                                                                                 # Project name.
    PRIVATE ${CMAKE_HOME_DIRECTORY}/include                                                         # Neutrino includes.
    ${GLAD_PATH}/include                                                                            # GLAD includes.
    ${GLFW_PATH}/include                                                                            # GLFW includes.
    ${NEUTRINO_PATH}/Code/include                                                                   # Neutrino includes.
    ${CL_PATH}/include)                                                                             # OpenCL includes.
  message("Setting Windows library directories...")                                                 # Printing message...
  set(GLFW_LIBRARY ${GLFW_PATH}/lib-vc2019/glfw3.lib)                                               # GLFW library.
  #set(CL_LIBRARY $"C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1/lib/x64/OpenCL.lib")
  target_link_libraries(                                                                            # Setting other linked libraries...
    ${PROJECT_NAME}                                                                                 # Project name.
    ${CL_PATH}/lib/x64/OpenCL.lib                                                                   # OpenCL library.
    ${GLFW_LIBRARY})                                                                                # GLFW library.
endif(WIN32)

message("DONE!")                                                                                    # Printing message...

message("")                                                                                         # Printing message...
message("################################################################################")         # Printing message...
message("#################################### DOXYGEN ###################################")         # Printing message...
message("################################################################################")         # Printing message...

message("Checking whether Doxygen is installed...")                                                 # Printing message...
find_package(Doxygen)                                                                               # Finding Doxygen...
if (DOXYGEN_FOUND)                                                                                  # Detecting Doxygen...
    message("Setting input and output files...")                                                    # Printing message...
    set(DOXYGEN_IN ${CMAKE_CURRENT_SOURCE_DIR}/../Docs/Doxyfile.in)                                 # Setting Doxygen input configuration file...
    set(DOXYGEN_OUT ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)                                           # Setting Doxygen output folder...
    message("Requesting to configure the file...")                                                  # Printing message...
    configure_file(${DOXYGEN_IN} ${DOXYGEN_OUT} @ONLY)                                              # Requesting to configure the files...
    message("DONE!")                                                                                # Printing message...
    add_custom_target(doc                                                                           # Adding "make doc" command...
        COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_OUT}                                                # Doxygen executable and output...
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}                                               # Working directory...
        COMMENT "Generating API documentation with Doxygen..."                                      # Comment...
        VERBATIM )                                                                                  # Escaping all commands properly for the build tool...
else (DOXYGEN_FOUND)                                                                                # If Doxygen not found:
  message("Doxygen need to be installed to generate the doxygen documentation!")                    # Printing message...
endif (DOXYGEN_FOUND)

message("")                                                                                         # Printing message...
message("################################################################################")         # Printing message...
message("################################# INSTRUCTIONS #################################")         # Printing message...
message("################################################################################")         # Printing message...

message("Now go to the \"./cmake\" directory created by this command and do one (or more)")         # Printing message...
message("of the following things:")                                                                 # Printing message...
message("")                                                                                         # Printing message...
message("1. Type: \"make\" in order to build the executable.")                                      # Printing message...
message("2. Type: \"make run\" in order to build and run the executable.")                          # Printing message...
message("3. Type: \"make doc\" in order to build the Doxygen documentation of the project.")        # Printing message...
message("")                                                                                         # Printing message...
message("################################################################################")         # Printing message...
message("############################# CONFIGURATION REPORT #############################")         # Printing message...
message("################################################################################")         # Printing message...
